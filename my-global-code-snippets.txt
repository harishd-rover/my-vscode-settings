{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	"console.log:Variable": {
		"scope": "javascript,typescript",
		"prefix": "cl",
		"body": [
						"console.${2|log, dir, error, info, table|}(${1:var});",
		],
		"description": "Log output to console - String literal"
	},

	"console.log:StringLiteral": {
		"scope": "javascript,typescript",
		"prefix": "cls",
		"body": [
			"console.log(`${1:Type...}`);",
		],
		"description": "Log output to console - Variable"
	}
	,
	
	"abstract:class" : {
		"scope": "javascript,typescript",
		"prefix": "abc",
		"body": [
			"class ${1:ClassName}{",
			"\tconstructor(){",
			"\t\tif(this.constructor.name === '${1:class}'){",
			"\t\t\tthrow Error('This is an Abstract calss or Interface');",
			"\t\t}",
			"\t}",
			"\t${2}",
			"}"
		],
		"description": "Abstract class"
	},
	"function:normal" : {
		"scope": "javascript,typescript",
		"prefix": "fun",
		"body": [
			"function ${1:Name}(${2:params}){",
			"\t${3}",
			"}"
		],
		"description": "basic function snippet"
	},
	"function:arrow" : {
		"scope": "javascript,typescript",
		"prefix": "afun",
		"body": [
			"(${1:params}) => {${2:statements}};",
		],
		"description": "Arrow function Syntax"
	},
	"class:extends": {
		"scope": "javascript,typescript",
		"prefix": "cext",
		"body": [
			"class ${1:DerivedClass} extends ${2:BaseClass}{",
			"\tconstructor(){",
			"\t\tsuper();",
			"\t}",
			"\t${3}",
			"}"
		],
		"description": "Arrow function Syntax"
	},

	"method:abstract": {
		"scope": "javascript,typescript",
		"prefix": "absm",
		"body": [
			"${1:methodName}(${2}) {",
			"\tthrow new Error('Abstract Method Not Implemented');",
			"}"
		],
		"description": "Abstract Method"
	},
	"creates a nornal class": {
		"prefix": "class",
		"body": [
			"class ${1:ClassName} {",
			"  constructor(${2}) {",
			"    ${3}",
			"  }",
			"",
			"  ${4:methodName}(${5}) {",
			"    ${6}",
			"  }",
			"}",
			""
		],
		"description": "creates a nornal class"
	}

}
